[{"bug_type":"NULL_DEREFERENCE","qualifier":"object `studentID` last assigned on line 43 could be null and is dereferenced at line 44.","severity":"ERROR","line":44,"column":-1,"procedure":"de.tum.in.ase.eist.Main.validStudentID(de.tum.in.ase.eist.Student,int):int","procedure_start_line":42,"file":"de/tum/in/ase/eist/Main.java","bug_trace":[{"level":0,"filename":"de/tum/in/ase/eist/Main.java","line_number":42,"column_number":-1,"description":"start of procedure validStudentID(...)"},{"level":0,"filename":"de/tum/in/ase/eist/Main.java","line_number":43,"column_number":-1,"description":""},{"level":1,"filename":"de/tum/in/ase/eist/Student.java","line_number":35,"column_number":-1,"description":"start of procedure hasValidID(...)"},{"level":1,"filename":"de/tum/in/ase/eist/Student.java","line_number":36,"column_number":-1,"description":"Taking true branch"},{"level":1,"filename":"de/tum/in/ase/eist/Student.java","line_number":36,"column_number":-1,"description":"Taking false branch"},{"level":1,"filename":"de/tum/in/ase/eist/Student.java","line_number":39,"column_number":-1,"description":"return from a call to Student$StudentID Student.hasValidID(int)"},{"level":0,"filename":"de/tum/in/ase/eist/Main.java","line_number":44,"column_number":-1,"description":""}],"key":"Main.java|validStudentID|NULL_DEREFERENCE","node_key":"cd917e0854ab05a03701b589d85cd12c","hash":"4121f72e3ce19a7acbca34b977a5e138","bug_type_hum":"Null Dereference"},{"bug_type":"RESOURCE_LEAK","qualifier":"resource of type `java.io.FileOutputStream` acquired to `file` by call to `FileOutputStream(...)` at line 43 is not released after line 46.\n**Note**: potential exception at line 45","severity":"ERROR","line":46,"column":-1,"procedure":"de.tum.in.ase.eist.Student.report():java.io.FileOutputStream","procedure_start_line":42,"file":"de/tum/in/ase/eist/Student.java","bug_trace":[{"level":0,"filename":"de/tum/in/ase/eist/Student.java","line_number":42,"column_number":-1,"description":"start of procedure report()"},{"level":0,"filename":"de/tum/in/ase/eist/Student.java","line_number":43,"column_number":-1,"description":""},{"level":0,"filename":"de/tum/in/ase/eist/Student.java","line_number":45,"column_number":-1,"description":"exception java.io.IOException"},{"level":0,"filename":"de/tum/in/ase/eist/Student.java","line_number":46,"column_number":-1,"description":""}],"key":"Student.java|report|RESOURCE_LEAK","node_key":"48815eab4c26cee962db00712b67bbd0","hash":"6af7d856f6883d3e7ab7409514b8c8ff","bug_type_hum":"Resource Leak"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `SeminarRoom.leave()` reads without synchronization from `this.places.[_]`. Potentially races with write in method `SeminarRoom.enter(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":38,"column":-1,"procedure":"de.tum.in.ase.eist.SeminarRoom.leave():de.tum.in.ase.eist.Student","procedure_start_line":0,"file":"de/tum/in/ase/eist/SeminarRoom.java","bug_trace":[{"level":0,"filename":"de/tum/in/ase/eist/SeminarRoom.java","line_number":38,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"de/tum/in/ase/eist/SeminarRoom.java","line_number":38,"column_number":-1,"description":"access to `this.places.[_]`"},{"level":0,"filename":"de/tum/in/ase/eist/SeminarRoom.java","line_number":29,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"de/tum/in/ase/eist/SeminarRoom.java","line_number":29,"column_number":-1,"description":"access to `this.places.[_]`"}],"key":"SeminarRoom.java|leave|THREAD_SAFETY_VIOLATION","hash":"431c8ec31adfcc196c20aaaa203c316f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFcAAAAIAAAAJgAAAB6gsGYA/5IJI2RlL3R1bS9pbi9hc2UvZWlzdC9TZW1pbmFyUm9vbS5qYXZhoLBdAP+SCSNkZS90dW0vaW4vYXNlL2Vpc3QvU2VtaW5hclJvb20uamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `SeminarRoom.leave()` writes to field `this.occupancy` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":40,"column":-1,"procedure":"de.tum.in.ase.eist.SeminarRoom.leave():de.tum.in.ase.eist.Student","procedure_start_line":0,"file":"de/tum/in/ase/eist/SeminarRoom.java","bug_trace":[{"level":0,"filename":"de/tum/in/ase/eist/SeminarRoom.java","line_number":40,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"de/tum/in/ase/eist/SeminarRoom.java","line_number":40,"column_number":-1,"description":"access to `this.occupancy`"},{"level":0,"filename":"de/tum/in/ase/eist/SeminarRoom.java","line_number":31,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"de/tum/in/ase/eist/SeminarRoom.java","line_number":31,"column_number":-1,"description":"access to `this.occupancy`"}],"key":"SeminarRoom.java|leave|THREAD_SAFETY_VIOLATION","hash":"2da6cd9064772ae2ba9de277865b42e9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAFcAAAAIAAAAJgAAAB6gsGgA/5IJI2RlL3R1bS9pbi9hc2UvZWlzdC9TZW1pbmFyUm9vbS5qYXZhoLBfAP+SCSNkZS90dW0vaW4vYXNlL2Vpc3QvU2VtaW5hclJvb20uamF2YUA="}]
